[tox]
labels =
    static = pre-commit, mypy
    tests = tests-unit, tests-e2e, tests-cicd_utils
isolated_build = true
requires =
    tox>=4
    tox-uv

[testenv]
description = run the pytest tests under {basepython}
package = wheel
wheel_build_env = .pkg
setenv =
    PYTHONDONTWRITEBYTECODE=1
    PYTHONHASHSEED=0
    COVERAGE_FILE=.coverage.{envname}
    _DIFFCOVER_DFLT_ARGS=--compare-branch={env:DIFF_AGAINST:origin/main} coverage.{envname}.xml --fail-under=100
    _COV_REPORT_XML=--cov-report=xml:coverage.{envname}.xml
    _COV_FILES_RM={env:COVERAGE_FILE} coverage.{envname}.xml
passenv =
    CI
    COVERAGE_*
    GITHUB_*
    PYTEST_*
parallel_show_output = true
deps =
    -r requirements/tests.txt
    # `cicd_utils` requirements also need to be installed
    -r requirements/cicd_utils.txt
allowlist_externals = rm, mv
commands =
    pytest: pytest --no-cov {posargs}

    tests-unit: rm -f {env:_COV_FILES_RM}
    tests-unit: pytest tests/unit --doctest-modules src {env:_COV_REPORT_XML} --cov-fail-under=90 {posargs:}
    tests-unit: diff-cover {env:_DIFFCOVER_DFLT_ARGS}

    tests-e2e: rm -f {env:_COV_FILES_RM}
    tests-e2e: pytest tests/e2e --cov=cicd_utils/cicd/ridgeplot_examples {env:_COV_REPORT_XML} --cov-fail-under=75 {posargs:}
    tests-e2e: diff-cover {env:_DIFFCOVER_DFLT_ARGS}

    tests-cicd_utils: rm -f {env:_COV_FILES_RM}
    tests-cicd_utils: pytest tests/cicd_utils --cov=cicd_utils {env:_COV_REPORT_XML} --cov-fail-under=50 {posargs:}
    tests-cicd_utils: diff-cover {env:_DIFFCOVER_DFLT_ARGS}

    coverage-combine: rm -f .coverage.combined coverage.combined.*.xml
    coverage-combine: rm -rf coverage/
    coverage-combine: coverage combine --keep --data-file=.coverage
    coverage-combine: mv .coverage .coverage.combined
    coverage-combine: coverage xml  --data-file=.coverage.combined --omit="cicd_utils/*,tests/*" -o coverage.combined.src.xml
    coverage-combine: coverage html --data-file=.coverage.combined --omit="cicd_utils/*,tests/*" -d coverage/combined/src
    coverage-combine: coverage report --data-file=.coverage.combined --omit="cicd_utils/*,tests/*"
[testenv:pre-commit]
description = run code style and linting checks with pre-commit
passenv =
    {[testenv]passenv}
    PRE_COMMIT_HOME
    SKIP
    XDG_CACHE_HOME
    SSH_AUTH_SOCK
skip_install = true
deps = pre-commit
# To update the pre-commit hooks, run: `pre-commit autoupdate`
commands =
    pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:mypy]
description = run type checks with mypy
deps =
    -r requirements/mypy.txt
    # mypy needs to inherit other environment dependencies in
    # order to infer types for code in tests, docs, etc...
    -r requirements/cicd_utils.txt
    -r requirements/docs.txt
    -r requirements/tests.txt
commands =
    mypy --config-file=mypy.ini --cache-dir=/dev/null --no-incremental --strict {posargs:}

[testenv:docs-{live,static}]
description = generate Sphinx (live/static) HTML documentation
setenv =
    {[testenv]setenv}
    PYTHONPATH={env:PYTHONPATH}{:}{toxinidir}/cicd_utils
deps = -r requirements/docs.txt
allowlist_externals = make
commands =
    make --directory=docs clean
    live: make --directory=docs livehtml
    static: make --directory=docs html
            python "cicd_utils/cicd/scripts/open_in_browser.py" "docs/build/html/index.html"

[testenv:release-notes]
description = extract release notes from docs/reference/changelog.md
skip_install = true
deps = -r requirements/cicd_utils.txt
commands = python cicd_utils/cicd/scripts/extract_latest_release_notes.py

[testenv:build-dists]
description = build source (sdist) and binary (wheel) distributions
deps =
    build
    twine
allowlist_externals = rm
commands =
    rm -rf dist/
    python -m build
    twine check --strict dist/*
