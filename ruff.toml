target-version = "py38"
select = [
    # Default rules:
    "F", # Pyflakes
    "E", # pycodestyle (E = errors)
    # Extra rules:
    "W", # pycodestyle (W = warnings)
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    'PIE', # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    # "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    # "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
ignore = [
    # flake8-comprehensions
    "C408", # Unnecessary `dict` call (rewrite as a literal)
    # pydocstyle
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
    "D209", # Multi-line docstring closing quotes should be on a separate line
    "D400", # First line should end with a period
    "D415", # First line should end with a period, question mark, or exclamation point
    # pylint
    "PLR0913", # Too many arguments to function call ({x} > 5)
    "PLR2004", # Magic value used in comparison, consider replacing {x} with a constant variable
    # tryceratops
    "TRY003", # Avoid specifying long messages outside the exception class
    # pep8-naming
    # (allow for sklearn's naming convention for uppercase `X`)
    "N803", # Argument name should be lowercase
    "N806", # Variable in function should be lowercase
]
line-length = 100

[per-file-ignores]
"bin/*" = [
    "T201", # `print` found
]
"extras/*" = [
    "T201", # `print` found
]
"docs/*" = [
    "S101", # Use of assert detected
    "T201", # `print` found
]
"tests/*" = [
    "S101", # Use of assert detected
    "SLF001", # Private member accessed: `_X`
]

[isort]
combine-as-imports = true
known-first-party = ["ridgeplot", "_ridgeplot_examples", "extras"]
required-imports = ["from __future__ import annotations"]

[pydocstyle]
convention = "numpy"

[pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
