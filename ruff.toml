# ================================================
# Top-level settings
# ================================================
target-version = "py39"
fix = true
line-length = 100

# ================================================
# Formatting settings (currently not used)
# ================================================
[format]
line-ending = "lf"
docstring-code-format = true

# ================================================
# Linting settings
# ================================================
[lint]
select = ["ALL"]
ignore = [
    # Ignored groups:
    "FBT", # flake8-boolean-trap
    "FIX", # flake8-fixme

    # flake8-comprehensions
    "C408", # Unnecessary `dict` call (rewrite as a literal)

    # pydocstyle
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
    "D209", # Multi-line docstring closing quotes should be on a separate line
    "D400", # First line should end with a period
    "D415", # First line should end with a period, question mark, or exclamation point

    # flake8-return
    "RET504", # Unnecessary variable assignment before `return` statement

    # eradicate (ERA)
    "ERA001", # Found commented-out code

    # pandas-vet
    "PD015", # Use `.merge` method instead of `pd.merge` function. They have equivalent functionality.
    "PD901", # `df` is a bad variable name. Be kinder to your future self.

    # pylint
    "PLR0913", # Too many arguments to function call ({x} > 5)
    "PLR2004", # Magic value used in comparison, consider replacing {x} with a constant variable

    # tryceratops
    "TRY003", # Avoid specifying long messages outside the exception class

    # flake8-commas (COM)
    "COM812", # Trailing comma missing

    # flake8-errmsg (EM)
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "EM103", # Exception must not use a .format() string directly, assign to variable first

    # pep8-naming
    # (allow for sklearn's naming convention for uppercase `X`)
    "N803", # Argument name should be lowercase
    "N806", # Variable in function should be lowercase

    # flake8-todos (TD)
    "TD001", # Invalid TODO tag: `FIXME`
    "TD002", # Missing author in [...]
    "TD003", # Missing issue link on the line following this TODO

    # flake8-annotations (ANN)
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in {name}
]

[lint.per-file-ignores]
"cicd_utils/*" = [
    "INP001", # File {x} is part of an implicit namespace package. Add an `__init__.py`
    "T201", # `print` found
]
"docs/*" = [
    "INP001", # File {x} is part of an implicit namespace package. Add an `__init__.py`
    "S101",   # Use of assert detected
    "T201",   # `print` found
]
"tests/*" = [
    "INP001", # File {x} is part of an implicit namespace package. Add an `__init__.py`
    "S101",   # Use of assert detected
    "SLF001", # Private member accessed: `_X`
]

[lint.flake8-annotations]
mypy-init-return = true

[lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[lint.flake8-import-conventions]
extend-aliases = { "numpy.typing" = "npt", "plotly.graph_objects" = "go" }
banned-from = ["pandas", "numpy"]

[lint.isort]
force-wrap-aliases = true
combine-as-imports = true
required-imports = ["from __future__ import annotations"]
known-first-party = ["ridgeplot", "cicd"]

[lint.mccabe]
max-complexity = 10

[lint.pycodestyle]
max-doc-length = 100

[lint.pydocstyle]
convention = "numpy"
